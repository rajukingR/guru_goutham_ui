// Full code of ContactsAddLayoutPage component with inline styles and Field component
import React, { useState } from 'react';

const ContactsEditLayout = () => {
  const [formData, setFormData] = useState({
    firstName: '', lastName: '', email: '', phone: '', company: '', customerId: '',
    date: '2025-05-28', industry: '', paymentType: 'Prepaid', street: '', landmark: '',
    pincode: '', city: 'Bangalore', state: 'Karnataka', country: 'India',
    gst: '', pan: '', owner: '', remarks: '', contactGeneratedBy: 'remote', activeStatus: true
  });

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <div style={containerStyle}>
      <div style={headerContainerStyle}>
        <h1 style={titleStyle}>Create a new Contact</h1>
      </div>
      <div style={formContainerStyle}>
        {/* Personal Details */}
        <Card icon="👤" title="Personal Details">
          <Field label="First Name" required value={formData.firstName} onChange={(v) => handleInputChange('firstName', v)} placeholder="Enter First Name" />
          <Field label="Last Name" value={formData.lastName} onChange={(v) => handleInputChange('lastName', v)} placeholder="Enter Last Name" />
          <Field label="Email ID" type="email" value={formData.email} onChange={(v) => handleInputChange('email', v)} placeholder="Enter Email" />
          <Field label="Phone Number" type="tel" value={formData.phone} onChange={(v) => handleInputChange('phone', v)} placeholder="Enter Phone Number" />
          <Field label="Company/Institute Name" value={formData.company} onChange={(v) => handleInputChange('company', v)} placeholder="Enter Company Name" />
          <Field label="Customer ID" value={formData.customerId} onChange={(v) => handleInputChange('customerId', v)} placeholder="Enter Customer ID" />
          <Field label="Date" type="date" value={formData.date} onChange={(v) => handleInputChange('date', v)} />
          <Field label="Industry" value={formData.industry} onChange={(v) => handleInputChange('industry', v)} placeholder="Enter Industry" />
          <div style={fieldContainerStyle}>
            <label style={labelStyle}>Payment Type</label>
            <div style={selectWrapperStyle}>
              <select style={selectStyle} value={formData.paymentType} onChange={(e) => handleInputChange('paymentType', e.target.value)}>
                <option value="Prepaid">Prepaid</option>
                <option value="Postpaid">Postpaid</option>
                <option value="Credit">Credit</option>
              </select>
              <div style={selectArrowStyle}>▼</div>
            </div>
          </div>
        </Card>

        {/* Address */}
        <Card icon="🏠" title="Address">
          <Field label="Street" value={formData.street} onChange={(v) => handleInputChange('street', v)} placeholder="Enter Street" />
          <Field label="Landmark" value={formData.landmark} onChange={(v) => handleInputChange('landmark', v)} placeholder="Enter Landmark" />
          <Field label="Pincode" value={formData.pincode} onChange={(v) => handleInputChange('pincode', v)} placeholder="Enter Pincode" />
          <Field label="City" value={formData.city} onChange={(v) => handleInputChange('city', v)} />
          <Field label="State" value={formData.state} onChange={(v) => handleInputChange('state', v)} />
          <Field label="Country" value={formData.country} onChange={(v) => handleInputChange('country', v)} />
        </Card>

        {/* Bank Details */}
        <Card icon="🏦" title="Bank Details">
          <Field label="GST" value={formData.gst} onChange={(v) => handleInputChange('gst', v)} placeholder="Enter GST" />
          <Field label="PAN No" value={formData.pan} onChange={(v) => handleInputChange('pan', v)} placeholder="Enter PAN No" />
        </Card>
      </div>

      <div style={formContainerStyle}>
        {/* Other Info */}
        <Card icon="ℹ️" title="Other Information">
          <Field label="Owner" value={formData.owner} onChange={(v) => handleInputChange('owner', v)} placeholder="Enter Owner Name" />
          <div style={{ gridColumn: '1 / -1' }}>
            <Field label="Remarks" type="textarea" value={formData.remarks} onChange={(v) => handleInputChange('remarks', v)} placeholder="Enter Remarks" />
          </div>
          <Field label="Contact Generated By" value={formData.contactGeneratedBy} onChange={(v) => handleInputChange('contactGeneratedBy', v)} />
        </Card>

        {/* Control */}
        <Card icon="⚙️" title="Control">
          <div style={checkboxContainerStyle}>
            <label style={checkboxLabelStyle}>
              <input type="checkbox" style={checkboxStyle} checked={formData.activeStatus} onChange={(e) => handleInputChange('activeStatus', e.target.checked)} />
              <div style={checkboxCustomStyle}>{formData.activeStatus && <span style={checkmarkStyle}>✓</span>}</div>
              <div>
                <span style={checkboxTextStyle}>Active Status</span>
                <span style={checkboxDescStyle}>Enable this contact in the system</span>
              </div>
            </label>
          </div>
        </Card>
      </div>

      <div style={buttonContainerStyle}>
        <button style={cancelBtnStyle} onMouseEnter={(e) => e.target.style.backgroundColor = '#e5e7eb'} onMouseLeave={(e) => e.target.style.backgroundColor = '#f3f4f6'}>Cancel</button>
        <button style={createBtnStyle} onMouseEnter={(e) => e.target.style.backgroundColor = '#1d4ed8'} onMouseLeave={(e) => e.target.style.backgroundColor = '#2563eb'}>Create</button>
      </div>
    </div>
  );
};

const Field = ({ label, placeholder, type = 'text', required = false, value, onChange }) => (
  <div style={fieldContainerStyle}>
    <label style={labelStyle}>{label}{required && <span style={requiredStyle}>*</span>}</label>
    {type === 'textarea' ? (
      <textarea style={textareaStyle} placeholder={placeholder} value={value} onChange={(e) => onChange(e.target.value)} rows={3} />
    ) : (
      <input type={type} style={inputStyle} placeholder={placeholder} value={value} onChange={(e) => onChange(e.target.value)} />
    )}
  </div>
);

const Card = ({ icon, title, children }) => (
  <div style={cardStyle}>
    <div style={cardHeaderContainerStyle}>
      <div style={iconStyle}>{icon}</div>
      <h3 style={cardHeaderStyle}>{title}</h3>
    </div>
    <div style={fieldsGridStyle}>{children}</div>
  </div>
);

// Define all styles below this comment as needed...
const containerStyle = { padding: '2rem', fontFamily: 'Inter, sans-serif', minHeight: '100vh', lineHeight: 1.6 };
const headerContainerStyle = { maxWidth: '1400px', padding: '0 1.5rem' };
const titleStyle = { fontSize: '20px', fontWeight: '700', color: '#1e293b', marginBottom: '0.25rem' };
const formContainerStyle = { display: 'grid', gap: '1.5rem', maxWidth: '1400px', gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', padding: '0 1.5rem', marginTop: '1.5rem' };
const cardStyle = { backgroundColor: '#fff', padding: '1.5rem', borderRadius: '12px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)', border: '1px solid #e2e8f0' };
const cardHeaderContainerStyle = { display: 'flex', alignItems: 'center', marginBottom: '1.5rem', paddingBottom: '1rem', borderBottom: '1px solid #e2e8f0' };
const iconStyle = { fontSize: '1.25rem', marginRight: '0.75rem', backgroundColor: '#f1f5f9', padding: '0.5rem', borderRadius: '8px', display: 'flex', alignItems: 'center', justifyContent: 'center' };
const cardHeaderStyle = { fontSize: '1.125rem', fontWeight: '600', color: '#1e293b', margin: 0 };
const fieldsGridStyle = { display: 'grid', gap: '1rem', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))' };
const fieldContainerStyle = { display: 'flex', flexDirection: 'column' };
const labelStyle = { marginBottom: '0.5rem', fontWeight: '500', fontSize: '0.875rem', color: '#374151' };
const requiredStyle = { color: '#ef4444', marginLeft: '0.25rem' };
const inputStyle = { width: '100%', padding: '0.75rem', borderRadius: '8px', border: '1px solid #d1d5db', fontSize: '0.875rem', backgroundColor: '#ffffff' };
const textareaStyle = { ...inputStyle, resize: 'vertical' };
const selectWrapperStyle = { position: 'relative', width: '100%' };
const selectStyle = { ...inputStyle, paddingRight: '2.5rem', appearance: 'none' };
const selectArrowStyle = { position: 'absolute', right: '0.75rem', top: '50%', transform: 'translateY(-50%)' };
const checkboxContainerStyle = { paddingTop: '1rem' };
const checkboxLabelStyle = { display: 'flex', alignItems: 'center', gap: '0.75rem' };
const checkboxStyle = { display: 'none' };
const checkboxCustomStyle = { width: '24px', height: '24px', border: '2px solid #d1d5db', borderRadius: '4px', display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: '#fff' };
const checkmarkStyle = { fontSize: '0.875rem', color: '#2563eb' };
const checkboxTextStyle = { fontWeight: '500', fontSize: '0.875rem', color: '#1e293b' };
const checkboxDescStyle = { fontSize: '0.75rem', color: '#6b7280' };
const buttonContainerStyle = { display: 'flex', justifyContent: 'flex-end', gap: '1rem', marginTop: '2rem', padding: '0 1.5rem' };
const cancelBtnStyle = { padding: '0.75rem 1.5rem', backgroundColor: '#f3f4f6', borderRadius: '8px', border: 'none', cursor: 'pointer', fontWeight: '500', fontSize: '0.875rem', color: '#1e293b' };
const createBtnStyle = { padding: '0.75rem 1.5rem', backgroundColor: '#2563eb', borderRadius: '8px', border: 'none', cursor: 'pointer', fontWeight: '500', fontSize: '0.875rem', color: '#fff' };

export default ContactsEditLayout;
